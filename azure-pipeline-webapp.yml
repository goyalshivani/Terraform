trigger:
- main

pr:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  TF_VERSION: '1.5.0'                        # Specify the Terraform version
  TF_STATE_STORAGE_ACCOUNT: '<storage-account-name>'  # Replace with your Azure Storage account name
  TF_STATE_CONTAINER: 'terraform-state'      # Replace with your container name for Terraform state
  TF_STATE_KEY: 'terraform.tfstate'          # Key for Terraform state file
  TF_VAR_location: 'East US'                 # Azure region
  TF_VAR_resource_group: 'myResourceGroup'
  TF_VAR_app_service_plan: 'myAppServicePlan'
  TF_VAR_web_app_name: 'myWebApp'
  AZURE_SUBSCRIPTION_ID: '<your-subscription-id>' # Replace with your Azure Subscription ID
  AZURE_CLIENT_ID: '<your-client-id>'             # Service Principal Client ID
  AZURE_CLIENT_SECRET: '<your-client-secret>'     # Service Principal Client Secret
  AZURE_TENANT_ID: '<your-tenant-id>'             # Tenant ID

steps:
- task: UseTerraform@0
  inputs:
    versionSpec: $(TF_VERSION)
  displayName: 'Install Terraform'

- script: |
    echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$(AZURE_CLIENT_ID)"
    echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$(AZURE_CLIENT_SECRET)"
    echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(AZURE_TENANT_ID)"
    echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(AZURE_SUBSCRIPTION_ID)"
  displayName: 'Set Terraform Environment Variables'

- script: |
    terraform --version
    terraform init \
      -backend-config="storage_account_name=$(TF_STATE_STORAGE_ACCOUNT)" \
      -backend-config="container_name=$(TF_STATE_CONTAINER)" \
      -backend-config="key=$(TF_STATE_KEY)"
  displayName: 'Initialize Terraform'

- script: |
    terraform plan -out=tfplan
  displayName: 'Plan Terraform Deployment'

- script: |
    terraform apply -auto-approve tfplan
  displayName: 'Apply Terraform Configuration'
